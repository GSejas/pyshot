# This workflow will:

# Check out the code.
# Set up Python and Poetry.
# Install dependencies and run tests using Poetry.
# Set up Docker Buildx.
# Cache Docker layers to speed up subsequent builds.
# Build the Docker image.
# Run the Docker container and execute tests inside it.
# If tests pass, proceed to the package job to build and store the distribution packages

name: Test and Package

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # - name: Create .env file
      #   env:
      #     MAILSAC_API_KEY: ${{ secrets.MAILSAC_API_KEY }}
      #     MAILSAC_TEST_EMAIL: ${{ secrets.MAILSAC_TEST_EMAIL }}
      #   run: |
      #     echo "MAILSAC_API_KEY=$MAILSAC_API_KEY" >> .env
      #     echo "MAILSAC_TEST_EMAIL=$MAILSAC_TEST_EMAIL" >> .env
      #     cat .env  # Add this line to display the contents of the .env file

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry config virtualenvs.create false  # Ensure Poetry uses the project environment
          poetry --version

      - name: Install dependencies with Poetry
        run: |
          poetry install

      - name: Run tests
        run: |
          poetry run pytest tests/unit

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          tags: pyshot:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Run Docker container and execute tests
        run: |
          docker run --rm pyshot:latest poetry run pytest tests/integration

  package:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version

      - name: Install dependencies with Poetry
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install

      - name: Build package
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
